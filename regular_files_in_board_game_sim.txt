This file contains the concatenated contents of all regular (non-binary) files in the current directory.
Each file's content is preceded by a banner with the filename.
Use this file to review or process the combined content of all files.

========================================
Filename: card_deck.csv
========================================
"Name,Flavor Text,POWER,HEAT,FREEDOM,ORDER,IMPORTS,EXPORTS,PyFxn,Params…",
"Stop Train, Everything that goes - stops,0,0,2,2,1,0,PyFxn,PyFxnParam",
"Decrease Speed,Whoah Big Fella!,0,0,1,0,1,0,PyFxn,PyFxnParam",
"Increase Speed, Increases power production,2,2,1,0,1,0,PyFxn,PyFxnParam",
"Heat Shield, Reduces heat damage,0,3,1,0,0,1,PyFxn,PyFxnParam",
"Increase Fe Yield, More efficient Iron Extraction from Ilmenite,2,0,0,1,0,1,PyFxn,PyFxnParam",
"Sheet-Metal Production, Some like it flat,1,1,1,1,0,1,PyFxn,PyFxnParam",
"Steel, The difference between Steel and Iron is a little bit of Carbon and a lot of know how!,1,1,0,1,0,1,PyFxn,PyFxnParam",
"Increase Ti Yield, More efficient Titanium Extraction from Ilmenite,2,0,0,1,0,1,PyFxn,PyFxnParam",
"Blockade, This is our hill.. these are our beans,1,0,1,0,1,0,PyFxn,PyFxnParam",
"Party, Workers Gone Wild,0,0,0,2,1,1,PyFxn,PyFxnParam",
"Bucket Buster, You can't shovel that,1,1,1,0,1,1,PyFxn,PyFxnParam",
"Solar Flare, Increases power production,3,0,1,0,0,1,PyFxn,PyFxnParam",
"Geothermal Vulcanism, Increases heat production,3,0,1,0,0,1,PyFxn,PyFxnParam",
"Rubble, Soil so loose you can pick it up with your bare hands.. well almost,0,1,1,0,0,1,PyFxn,PyFxnParam",
"Rocky Road, it's not just of ice cream,1,0,1,0,1,0,PyFxn,PyFxnParam",
"Boulder, Like a rock but much bigger,1,1,1,0,1,1,PyFxn,PyFxnParam",
"Civil Service Day, Usually we aren't very civil,0,0,0,3,0,2,PyFxn,PyFxnParam",
"Rail Damage, Railways on Mercury,0,1,0,1,0,1,PyFxn,PyFxnParam"

========================================
Filename: cards.py
========================================
"""
@file cards.py: this file deals with constructs used like 'cards' in the game
@brief It defines the Card and CardDeck classes
"""

import random
from resources import Resources, power, heat, freedom, order, imports, exports

class Card:
    def __init__(self, name, text, cost: Resources):
        self.name = name  # Name of the card
        self.text = text  # Description of the card's effect
        self.cost = cost # Dictionary of resource and quantity (e.g., {Resource.POWER: 2, Resource.HEAT: 1}) (e.g., [[Resource.POWER, 2], [Resource.HEAT, 1]])

    def __str__(self):
        resource_gauge = ""
        for resource, amount in self.cost.components.items():
            # Define the characters for the gauge
            gauge_chars = ['▏', '▎', '▍', '▌', '▋', '▊', '▉', '█']
            
            # Calculate the number of full blocks and the remainder
            full_blocks = amount // 8
            remainder = amount % 8
            
            # Build the gauge string for this resource
            gauge_string = '█' * full_blocks
            if remainder > 0:
                gauge_string += gauge_chars[remainder - 1]
            
            # Concatenate the gauge with the resource color
            resource_gauge += f"{resource.markup()}{gauge_string}\033[0m"
    
        return f"{self.name}: {resource_gauge} "
    
    #def __str__(self):
    #    return ", ".join(
    #        f"{resource.markup()}{resource.name.lower().capitalize()}: {self.components[resource]:>4}{RESET}"
    #        for resource in ResourceType
    #    )

class CardDeck:
    def __init__(self, card_data: list[str]):
        """Initialize the CardDeck with card data from a CSV array."""
        self.deck = []
        for line in card_data:
            parts = line.split(', ')
            name = parts[0]
            text = parts[1]
            cost = (power * int(parts[2]) + heat * int(parts[3]) + 
                   freedom * int(parts[4]) + order * int(parts[5]) + 
                   imports * int(parts[6]) + exports * int(parts[7]))
            self.deck.append(Card(name, text, cost))
        random.shuffle(self.deck)

    def draw_card(self) -> Card:
        return self.deck.pop() if self.deck else None



========================================
Filename: collator.sh
========================================
#!/bin/bash

output_file="regular_files_in_$(basename "$PWD").txt"

# Write instructions at the beginning of the file
echo "This file contains the concatenated contents of all regular (non-binary) files in the current directory." > "$output_file"
echo "Each file's content is preceded by a banner with the filename." >> "$output_file"
echo "Use this file to review or process the combined content of all files." >> "$output_file"
echo "" >> "$output_file"

for file in *; do
    if [ -f "$file" ] && ! file "$file" | grep -q "binary"; then
        echo "========================================" >> "$output_file"
        echo "Filename: $file" >> "$output_file"
        echo "========================================" >> "$output_file"
        cat "$file" >> "$output_file"
        echo "" >> "$output_file"
    fi
done

echo "All regular (non-binary) files have been concatenated into $output_file"
========================================
Filename: game.py
========================================
"""
@bref: This file contains the game logic for the game. It's the 'main'
@details: it also has functions which deal with more than one class
@author: qcarver@gmail.com
@license: this is a WIP, it is private, not for distribution
"""
import copy
#import pdb #pdb.set_trace() # to pause for debugging
from player import Player, Trade, TRADE_PAYOUT_MAP
from train import CarType, Car
from cards import Card, CardDeck
from resources import Resources, power, heat, freedom, order, imports, exports

# Game.py
import copy
from ui import GameUI  # Import our UI abstraction
from player import Player, Trade, TRADE_PAYOUT_MAP
from train import CarType, Car 
from cards import Card, CardDeck 
from resources import Resources, power, heat, freedom, order, imports, exports
from transaction import Transaction

players =  []

class Game:
    def __init__(self, ui: GameUI):
        self.ui = ui  # Injected UI dependency
        self.round = 1  # Initialize game round
        
        self.players =  [
            Player("CPU1", Trade.SMELTER),
            Player("CPU2", Trade.BLACKSMITH),
            Player("CPU3", Trade.NAVVY),
            Player("CPU4", Trade.QUARRYMAN),
            Player("CPU5", Trade.MACHINIST)
        ]
        # Initialize card deck using CSV-style card data
        self.card_deck = CardDeck([
            "Stop Train, Everything that goes - stops, 0, 0, 2, 2, 1, 0, PyFxn, PyFxnParam", 
            "Decrease Speed, Whoah Big Fella!, 0, 0, 1, 0, 1, 0, PyFxn, PyFxnParam", 
            "Increase Speed, Increases power production, 2, 2, 1, 0, 1, 0, PyFxn, PyFxnParam", 
            "Heat Shield, Reduces heat damage, 0, 3, 1, 0, 0, 1, PyFxn, PyFxnParam", 
            "Increase Fe Yield, More efficient Iron Extraction from Ilmenite, 2, 0, 0, 1, 0, 1, PyFxn, PyFxnParam", 
            "Sheet-Metal Production, Some like it flat, 1, 1, 1, 1, 0, 1, PyFxn, PyFxnParam", 
            "Steel, The difference between Steel and Iron is a little bit of Carbon and a lot of know how!, 1, 1, 0, 1, 0, 1, PyFxn, PyFxnParam", 
            "Increase Ti Yield, More efficient Titanium Extraction from Ilmenite, 2, 0, 0, 1, 0, 1, PyFxn, PyFxnParam", 
            "Blockade, This is our hill.. these are our beans, 1, 0, 1, 0, 1, 0, PyFxn, PyFxnParam", 
            "Party, Workers Gone Wild,TRADE_PAYOUT_MAP,  0, 0, 0, 2, 1, 1, PyFxn, PyFxnParam", 
            "Bucket Buster, You can't shovel that, 1, 1, 1, 0, 1, 1, PyFxn, PyFxnParam", 
            "Solar Flare, Increases power production, 3, 0, 1, 0, 0, 1, PyFxn, PyFxnParam", 
            "Geothermal Vulcanism, Increases heat production, 3, 0, 1, 0, 0, 1, PyFxn, PyFxnParam", 
            "Rubble, Soil so loose you can pick it up with your bare hands.. well almost, 0, 1, 1, 0, 0, 1, PyFxn, PyFxnParam", 
            "Rocky Road, it's not just ice cream, 1, 0, 1, 0, 1, 0, PyFxn, PyFxnParam", 
            "Boulder, Like a rock but much bigger, 1, 1, 1, 0, 1, 1, PyFxn, PyFxnParam", 
            "Civil Service Day, Usually we aren't very civil, 0, 0, 0, 3, 0, 2, PyFxn, PyFxnParam", 
            "Rail Damage, Railways on Mercury, 0, 1, 0, 1, 0, 1, PyFxn, PyFxnParam"
        ])
    
    def draw_card(self, player):
        response = self.ui.prompt_input(f"{player.name} (draw card)? [Y]: ") or "Y"
        if response.lower() == 'q':
            self.ui.display_message("Game terminated by user.")
            exit()
        if response.upper() == "Y":
            card = self.card_deck.draw_card()
            if card:
                player.cards.append(card)
                self.ui.display_message(f"{player.name} drew {card}.")
            else:
                self.ui.display_message("The deck is empty!")
        else:
            self.ui.display_message(f"{player.name} didn't draw a card.")

    def calculate_payout(self, player):
        resources_before_payout = copy.deepcopy(player.resources)
        for car in player.train_cars:
            player.resources += (TRADE_PAYOUT_MAP[car.car_type] * car.proficiency)

        self.ui.display_message(f"   {resources_before_payout}")
        self.ui.display_message(f" + {player.resources - resources_before_payout}")
        self.ui.display_message("-----------------------------------------")
        self.ui.display_message(f" = {player.resources}")

    def transact(self, player):
        success = False
        transaction = self.ui.prompt_transaction_input()
        if transaction:
            transaction.accept()
            self.ui.display_message("Transaction successful.")
            success = True
        else:
            self.ui.display_message("Transaction failed.")
        return success

    def action_phase(self, player):
        self.ui.display_message("Actions available:")
        for index, card in enumerate(player.cards, start=1):
            if card.cost <= player.resources:
                self.ui.display_message(f"{index}. {card}")
            else:
                # For simplicity, we show the same message; you can customize this styling if needed.
                self.ui.display_message(f"{index}. {card} [Cannot afford]")
        self.ui.display_message("T. Transact")
        self.ui.display_message("P. Pass")

        valid_input = False
        while not valid_input:
            action_input = self.ui.prompt_input("Choose an action (1, 2, ..., T, P)[P]: ").strip().upper()
            if not action_input:
                action_input = "P"
            if action_input.startswith("T"):
                transaction_successful = self.transact(player)
                valid_input = transaction_successful
            elif action_input.startswith("P"):
                self.ui.display_message(f"{player.name} passes the action phase.")
                valid_input = True
            elif action_input == "q":
                self.ui.display_message("Game terminated by user.")
                exit()
            else:
                self.play_selected_card(player, action_input)

    def play_selected_card(self, player, action_input):
        try:
            card_index = int(action_input) - 1
            if 0 <= card_index < len(player.cards):
                selected_card = player.cards[card_index]
                if selected_card.cost <= player.resources:
                    self.ui.display_message(f"Playing card: {selected_card}")
                    # Implement card action logic here
                else:
                    self.ui.display_message("Not enough resources to play card")
            else:
                self.ui.display_message("Invalid card selection.")
        except ValueError:
            self.ui.display_message("Invalid input. Please choose a valid action.")

    def run_game(self):
        while self.round <= 4:
            for player in self.players:
                self.ui.display_message(f"--- Round {self.round} ---")
                if self.round == 1: 
                    new_name = self.ui.prompt_input(f"What is {player.trade.name}'s name? [{player.name}]: ")
                    if new_name:
                        player.name = new_name
                for phase in ["Draw", "Payout", "Action"]:
                    if phase == "Draw":
                        self.draw_card(player)
                    elif phase == "Payout":
                        self.calculate_payout(player)
                    elif phase == "Action":
                        self.action_phase(player)
            self.round += 1  
            self.ui.display_game_board()  # Use default value of 36 boxes


========================================
Filename: __init__.py
========================================
# Mercury Rails Game: A text-based game of resource management and strategy on Mercury.
# The author qcarver@gmail.com does NOT authorize the use of this code for ANYTHING 
# it is the intellectual property of the Carver family and shouldn't be distributed. 
# Even worse, it is a work in progress and not ready for ANYONE ANYWAY. Good Talk! 

from resources import ResourceType, Resources
from player import Player
from cards import Card, CardDeck
from game import Game
from ui import ConsoleUI
========================================
Filename: LICENSE
========================================
This software is private. It is licensed to be use by the author only.

No big deal though, it's a silly work-in-progress, nothing-to-see-here!

Please write to the author if you see something you'd like to use.

========================================
Filename: main.py
========================================
# Mercury Rails Game: A text-based game of resource management and strategy on Mercury.
# The author qcarver@gmail.com does NOT authorize the use of this code for ANYTHING 
# it is the intellectual property of the Carver family and shouldn't be destributed. 
# Even worse, it is a work in progress and not ready for ANYONE ANYWAY. Good Talk! 

# filepath: /home/qcarver/Documents/NightTrain/board_game_sim/__init__.py
from game import Game
from ui import ConsoleUI

if __name__ == "__main__":
    from ui import ConsoleUI  # Import the concrete UI
    ui_instance = ConsoleUI()
    game = Game(ui_instance)
    game.run_game()
========================================
Filename: player.py
========================================
"""
@author: qcarver@gmail.com  
@brief: Player class and enumerators, relations between player and train objects
@license: this is a WIP, it is private, not for distribution
"""
from enum import Enum
from resources import Resources, power, heat, freedom, order, imports, exports
from train import Car, CarType

class Trade(Enum):
    QUARRYMAN = 1
    SMELTER = 2
    BLACKSMITH = 3
    MACHINIST = 4
    NAVVY = 5 

CAR_TYPE_MAP = {
    Trade.QUARRYMAN: CarType.EXCAVATOR,
    Trade.SMELTER: CarType.FOUNDARY,
    Trade.BLACKSMITH: CarType.FORGE,
    Trade.MACHINIST: CarType.ENGINE,
    Trade.NAVVY: CarType.TRACKLAYER
}

TRADE_PAYOUT_MAP = {    #CCWR:2,        RESOURCE:4,     CCR:2
    CarType.EXCAVATOR:  Resources((2,heat),         (4,freedom), (2,imports)),
    CarType.ENGINE:     Resources((2,freedom), (4,imports),      (2,power)),
    CarType.FOUNDARY:   Resources((2,imports),      (4,power),        (2,order)),
    CarType.TRACKLAYER: Resources((2,power),        (4,order),        (2,exports)),
    CarType.FORGE:      Resources((2,order),        (4,exports),      (2,heat))
}

class Player:

    _id_counter = 0
    _players = {}    

    @classmethod
    def _generate_id(cls):
        cls._id_counter += 1
        return cls._id_counter

    def __init__(self, name, trade):
        self.name = name
        self.trade = trade  # Enumerator for the player's trade
        self.cards = []  # Player's card collection
        self.train_cars = [Car(car_type=CAR_TYPE_MAP[trade], proficiency=1)]  # Initial train and car based on trade
        self.resources = Resources()  # Initialize the player's resources to 0
        self.id = Player._generate_id() 
        self.__class__._players[self.id] = self

    @classmethod
    def get_player_by_id(cls, player_id):
        return cls._players.get(player_id)
    
    def __str__(self):
        column = f"{self.name} holds:\n{'-' * (len(self.name) + 7)}\n"
        column += "0. Nothing\n"
        if self.cards:
            for index, card in enumerate(self.cards, start=1):
                column += f"{index}. Card: {card}\n"
        if self.resources:
            for resource, quantity in self.resources.components.items():
                if quantity > 0:
                    column += f"{resource.name[0].upper()}. {resource.name}: {quantity}\n"
        return column

========================================
Filename: README.md
========================================
# board_game_sim.py

Feb 2, 2025

This should all check out into a folder called "board_game_sim"
To run, open a console in the that dir type: 

python3 run_board_game.py

if python3 isn't installed it won't start, but you could try w/
python or python2. python3 is 'free' though - recommend just download

QC

========================================
Filename: regular_files_in_board_game_sim.txt
========================================

========================================
Filename: resources.py
========================================
"""
@file money.py: this file deals with constructs used like 'money' in the game
@brief It defines the Resources class and ResourceType enum and type shorthand 
@details Resources are a collection of quantities of ResourceTypes. The latter
is a fancy enumeration and can only be used to reference a single instance of
one ResourceType. Some arithmetic operations are overloaded to make it easier
to work with Resources like you might with money. All mathematical operations
are computed element-wise (by contained ResourceTypes) and return a new
Resources object.
@version 0.1
"""
import operator
from enum import Enum

# Define the color_map dictionary outside the class
color_map = {
    "POWER": ("DARK_YELLOW", "\033[33m", 1),
    "HEAT": ("DARK_ORANGE", "\033[38;5;208m", 2),
    "FREEDOM": ("DARK_PINK", "\033[38;5;197m", 3),
    "ORDER": ("CORPORATE_BLUE", "\033[34m", 4),
    "IMPORTS": ("FORREST_GREEN", "\033[32m", 5),
    "EXPORTS": ("MEDIUM_DARK_GRAY", "\033[38;5;240m", 6)
}

class ResourceType(Enum):
    """
    @brief ResourceType is an enumeration of the different types of resources
    @details It's used to reference an instance of a type of resource. 
    Note ez shorthands are: power, heat, freedom, order, imports, exports
    """ 
    POWER = 1
    HEAT = 2
    FREEDOM = 3
    ORDER = 4
    IMPORTS = 5
    EXPORTS = 6

    def __init__(self, value):
        """
        @brief Initialize the ResourceType with its corresponding color and value.
        @param value The value of the enum member.
        """
        color_name, color_code, _ = color_map[self.name]
        self.color_name = color_name
        self.color_code = color_code

    @staticmethod
    def with_initial(char):
        char = char.upper()
        for resource in ResourceType:
            if resource.name.startswith(char):
                return resource
        return None

    def markup(self):
        """
        @brief Returns the ANSI escape code for this resource type's color.
        @return The ANSI escape code as a string.
        """
        return self.color_code
    
    def color(self):
        """
        @brief Returns the color name for this resource type.
        @return The color name as a string. 
        """
        return self.color_name

    # Eg: resources = ResourceType.POWER * 2
    def __mul__(self, quantity):
        return Resources((quantity, self))

    # Eg: rmul just uses mul as its delegate 
    def __rmul__(self, quantity):
        return self.__mul__(quantity)

# Shorthand references
power = ResourceType.POWER
heat = ResourceType.HEAT
freedom = ResourceType.FREEDOM
order = ResourceType.ORDER
imports = ResourceType.IMPORTS
exports = ResourceType.EXPORTS

RESET = "\033[0m"

"""
@brief Resources is a collection of quantities of ResourceTypes 
@details +, -, *, +=,are overloaded to make finances more ituative 
"""
class Resources:
    def __init__(self, *args):
        # Initialize all resource counts to 0
        self.components = {resource: 0 for resource in ResourceType}
        
        # Update the resources with the provided arguments
        for quantity, resource in args:
            if resource in self.components:
                self.components[resource] += quantity
    
    def __add__(self, other):
        if isinstance(other, Resources):
            new_resources = Resources()
            for resource in ResourceType:
                new_resources.components[resource] = self.components[resource] + other.components[resource]
            return new_resources
        return NotImplemented

    def __sub__(self, other):
        if isinstance(other, Resources):
            new_resources = Resources()
            for resource in ResourceType:
                new_resources.components[resource] = self.components[resource] - other.components[resource]
            return new_resources
        return NotImplemented

    #Eg: resources = ResourcesType * 2 #doubles the amount of everything in resource
    def __mul__(self, quantity):
        if isinstance(self, Resources) and isinstance(quantity, int):
            new_resources = Resources()
            for resource in ResourceType:
                new_resources.components[resource] = self.components[resource] * quantity
            return new_resources
        return Resources((quantity, self))

    #Eg: rmul just uses mul as its delegate 
    def __rmul__(self, quantity):
        return self.__mul__(quantity)    
    
    def __iadd__(self, other):
        #pdb.set_trace()
        if isinstance(other, Resources):
            for resource in ResourceType:
                self.components[resource] += other.components[resource]
        elif isinstance(other, ResourceType):
            self.components[other] += 1
        else:
            return NotImplemented
        return self

    def compare(self, other, op):
        ops = {
            '<': operator.lt,
            '<=': operator.le,
            '==': operator.eq,
            '!=': operator.ne,
            '>': operator.gt,
            '>=': operator.ge
        }
        return all(ops[op](self.components[resource], other.components[resource]) for resource in self.components)

    def __lt__(self, other):
        return self.compare(other, '<')

    def __le__(self, other):
        return self.compare(other, '<=')

    def __eq__(self, other):
        return self.compare(other, '==')

    def __ne__(self, other):
        return self.compare(other, '!=')

    def __gt__(self, other):
        return self.compare(other, '>')

    def __ge__(self, other):
        return self.compare(other, '>=')
    
    def __str__(self):
        return ", ".join(
            f"{resource.markup()}{resource.name.lower().capitalize()}: {self.components[resource]:>4}{RESET}"
            for resource in ResourceType
        )

========================================
Filename: train.py
========================================
"""
@Author: qcarver@gmail.com
@brief: This file contains the classes and enumerators for the game's train and car objects.
"""

from enum import Enum

class CarType(Enum):
    EXCAVATOR = 1
    FOUNDARY = 2
    FORGE = 3
    ENGINE = 4
    TRACKLAYER = 5

class Car:
    def __init__(self, car_type : CarType, proficiency: int = 1):
        self.car_type = car_type  # Enumerator for the car's type
        self.proficiency = proficiency  # Proficiency level between 1 and 3
========================================
Filename: transaction.py
========================================
"""
@file Transaction.py
@brief This file defines the Transaction class for handling resource transactions between players.
@details The Transaction class manages the exchange of resources and cards between players.
@version 0.1
"""

from resources import ResourceType, Resources
from player import Player
import re
import pdb #pdb.set_trace() # to pause for debugging

class Transaction:
    """
    @class Transaction
    @brief Manages resource transactions between players.
    @details This class handles the exchange of resources and cards between players.
    """

    class Bid:
        """
        @class Bid
        @brief Contains the details of a bid from a player.
        @details This class holds the player, resources, and cards being offered or received.
        """
        def __init__(self, player: Player, resources: Resources, cards: list):
            """
            @brief Initialize the Bid with the player, resources, and cards.
            @param player The player making the bid.
            @param resources The resources included in the bid.
            @param cards The cards included in the bid.
            """
            self.player = player
            self.resources = resources
            self.cards = cards

    def __init__(self, offering_bid: 'Transaction.Bid', receiving_bid: 'Transaction.Bid'):
        """
        @brief Initialize the Transaction with the offering and receiving bids.
        @param offering_bid The bid from the offering player.
        @param receiving_bid The bid from the receiving player.
        """
        self.offering_bid = offering_bid
        self.receiving_bid = receiving_bid

    def accept(self):
        """
        @brief Accept the transaction and transfer resources and cards.
        """
        # Transfer resources from offering player to receiving player
        for resource_type, quantity in self.offering_bid.resources.components.items():
            self.receiving_bid.player.resources.components[resource_type] += quantity
            self.offering_bid.player.resources.components[resource_type] -= quantity

        # Transfer cards from offering player to receiving player
        for card in self.offering_bid.cards:
            self.receiving_bid.player.cards.append(card)
            self.offering_bid.player.cards.remove(card)

        # Transfer resources from receiving player to offering player
        for resource_type, quantity in self.receiving_bid.resources.components.items():
            self.offering_bid.player.resources.components[resource_type] += quantity
            self.receiving_bid.player.resources.components[resource_type] -= quantity

        # Transfer cards from receiving player to offering player
        for card in self.receiving_bid.cards:
            self.offering_bid.player.cards.append(card)
            self.receiving_bid.player.cards.remove(card)

        print(f"Transaction completed between {self.offering_bid.player.name} and {self.receiving_bid.player.name}.")
========================================
Filename: ui.py
========================================
import re
from abc import ABC, abstractmethod
from wcwidth import wcswidth
from transaction import Transaction
from player import Player
from resources import Resources, ResourceType

class GameUI(ABC):
    @abstractmethod
    def display_message(self, message: str) -> None:
        """Display a message to the user."""
        pass

    @abstractmethod
    def prompt_input(self, prompt: str) -> str:
        """Prompt the user for input and return the response."""
        pass

    @abstractmethod
    def print_two_columns(self, left: str, right: str, column_width: int = 40) -> None:
        """
        Print two columns of text side by side.
        
        Args:
            left (str): Text for the left column.
            right (str): Text for the right column.
            column_width (int): Width of each column. Default is 40.
        """
        pass

    @abstractmethod
    def prompt_transaction_input(self) -> Transaction:
        """
        Prompt the user with the current state of the offering and receiving players.
        
        Args:
            offering_details (TransactionDetails): The details of the offering player.
            receiving_details (TransactionDetails): The details of the receiving player.
        """
        pass

    @abstractmethod
    def display_game_board(self, num_boxes: int = 36) -> None:
        """
        Display an ASCII box layout based on the specified number of boxes.
        
        Args:
            num_boxes (int): The number of boxes to render.
        """
        pass

# --- Example of a concrete Console UI implementation ---

class ConsoleUI(GameUI):
    def display_message(self, message: str) -> None:
        print(message)

    def prompt_input(self, prompt: str) -> str:
        return input(prompt)

    def print_two_columns(self, left: str, right: str, column_width: int = 40) -> None:
        # Split the input strings into lines
        left_lines = left.splitlines()
        right_lines = right.splitlines()
        max_rows = max(len(left_lines), len(right_lines))
        
        # Pad the shorter list with empty strings
        left_lines += [""] * (max_rows - len(left_lines))
        right_lines += [""] * (max_rows - len(right_lines))
        
        # Function to strip ANSI escape codes
        def strip_ansi_codes(text):
            ansi_escape = re.compile(r'\x1B[@-_][0-?]*[ -/]*[@-~]')
            return ansi_escape.sub('', text)
        
        # Print each pair of lines, left-justified within the specified width
        for left_line, right_line in zip(left_lines, right_lines):
            stripped_left_line = strip_ansi_codes(left_line)
            left_printable_width = wcswidth(stripped_left_line)
            left_padding = column_width - left_printable_width
            print(f"{left_line}{' ' * left_padding}{right_line}")

    def prompt_transaction_input(self) -> Transaction:
        """
        @brief Prompt the user with the current state of the offering and receiving players.
        """
        pattern = re.compile(r'^[0-5]:((\d+|[HPFOIE]\d+)(\+(\d+|[HPFOIE]\d+))*)?>[0-5]:((\d+|[HPFOIE]\d+)(\+(\d+|[HPFOIE]\d+))*)?$')
        
        while True:
            user_input = input("Enter your transaction (Eg: *your_id#*:1+H1+P2>*others_id#*:F1+I1)")
            if pattern.match(user_input):
                break
            else:
                print(f"Invalid input format. Try something like (player:card#+resource-quantity...>...): ")

        # Parse the input
        offering_selection, receiving_selection = user_input.split('>')
        offering_player_id, offering_items = offering_selection.split(':')
        receiving_player_id, receiving_items = receiving_selection.split(':')

        # Create Transaction.Bid objects
        offering_player = Player.get_player_by_id(int(offering_player_id))
        offering_bid = Transaction.Bid(offering_player, Resources(), [])
        receiving_player = Player.get_player_by_id(int(receiving_player_id))  
        receiving_bid = Transaction.Bid(receiving_player, Resources(), [])

        # Process offering items
        for item in offering_items.split('+'):
            if item.isdigit():
                # Handle card offering
                card_index = int(item) - 1
                if 0 <= card_index < len(offering_player.cards):
                    offering_bid.cards.append(offering_player.cards[card_index])
            else:
                # Handle resource offering
                resource_type = ResourceType.with_initial(item[0])
                quantity = int(item[1:])
                offering_bid.resources += resource_type * quantity   #.add(resource_type, quantity)
        
        # Process receiving items
        for item in receiving_items.split('+'):
            if item.isdigit():
                # Handle card offering
                card_index = int(item) - 1
                if 0 <= card_index < len(receiving_player.cards):
                    receiving_bid.cards.append(receiving_player.cards[card_index])
            else:
                # Handle resource offering
                resource_type = ResourceType.with_initial(item[0])
                quantity = int(item[1:])
                receiving_bid.resources += resource_type * quantity      #.add(resource_type, quantity)
        
        transaction = Transaction(offering_bid, receiving_bid)

        #Note the transaction is not yet accepted, it is just created
        return transaction

    def display_game_board(self, num_boxes: int = 36) -> None:
        if num_boxes < 1:
            return

        top_row = "┌"
        middle_rows = ["│" for _ in range(5)]
        bottom_row = "└"

        for i in range(num_boxes):
            if (i + 1) % 12 == 0:
                top_row += "▄▄┬" if i < num_boxes - 1 else "▄▄┐"
                for j in range(5):
                    middle_rows[j] += "  │"
                bottom_row += "▀▀┴" if i < num_boxes - 1 else "▀▀┘"
            else:
                top_row += "──┬" if i < num_boxes - 1 else "──┐"
                for j in range(5):
                    middle_rows[j] += "  │"
                bottom_row += "──┴" if i < num_boxes - 1 else "──┘"

        print(top_row)
        for row in middle_rows:
            print(row)
        print(bottom_row)

